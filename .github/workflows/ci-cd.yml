name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run backend tests
      run: |
        cd backend
        mvn clean test
        
    - name: Generate test report
      run: |
        cd backend
        mvn surefire-report:report
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: backend/target/surefire-reports/

  build-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Build unified backend image (includes frontend)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: false
        tags: qa-automation-hub:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        echo "Testing Docker image build..."
        docker images qa-automation-hub:test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: qa-automation-hub:test
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Railway Staging
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Railway Deployment Check
      run: |
        echo "üöÄ Railway Deployment Status"
        echo "============================="
        echo "‚úÖ Railway GitHub Integration Active"
        echo "‚úÖ Single-service architecture (Backend + Frontend)"
        echo "‚úÖ Automatic deployment on push to main"
        echo ""
        echo "Deployment URL: https://passionate-communication-production-da98.up.railway.app"
        echo "Health Check: https://passionate-communication-production-da98.up.railway.app/actuator/health"
        echo "Dashboard: https://passionate-communication-production-da98.up.railway.app/test-dashboard.html"
        echo ""
        echo "No manual deployment needed - Railway handles it automatically!"
        
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Wait for Railway deployment
      run: |
        echo "‚è≥ Waiting for Railway deployment to be ready..."
        sleep 60  # Wait for deployment to complete
        
    - name: Health Check
      run: |
        echo "üîç Running health checks..."
        
        # Test health endpoint
        HEALTH_URL="https://passionate-communication-production-da98.up.railway.app/actuator/health"
        echo "Testing: $HEALTH_URL"
        
        for i in {1..5}; do
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "‚úÖ Health check passed on attempt $i"
            break
          else
            echo "‚ùå Health check failed on attempt $i, retrying..."
            sleep 10
          fi
        done
        
    - name: Basic Performance Test
      run: |
        echo "üöÄ Running basic performance tests..."
        
        # Test dashboard load time
        DASHBOARD_URL="https://passionate-communication-production-da98.up.railway.app/test-dashboard.html"
        echo "Testing dashboard load time: $DASHBOARD_URL"
        
        time curl -f -s "$DASHBOARD_URL" > /dev/null
        
        # Test API endpoints
        API_BASE="https://passionate-communication-production-da98.up.railway.app"
        echo "Testing API endpoints..."
        
        curl -f -s "$API_BASE/actuator/health" | grep -q "UP" && echo "‚úÖ Health endpoint OK"
        curl -f -s "$API_BASE/api/v1/testdata/templates" > /dev/null && echo "‚úÖ Templates endpoint OK"

  deploy-production:
    name: Production Status Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Production Deployment Status
      run: |
        echo "üéâ Production Deployment Status"
        echo "==============================="
        echo ""
        echo "‚úÖ PRODUCTION IS LIVE!"
        echo "‚úÖ Railway automatically handles production deployment"
        echo "‚úÖ Single-service architecture deployed successfully"
        echo ""
        echo "üåê Production URLs:"
        echo "   Main App: https://passionate-communication-production-da98.up.railway.app/test-dashboard.html"
        echo "   Health: https://passionate-communication-production-da98.up.railway.app/actuator/health"
        echo "   API: https://passionate-communication-production-da98.up.railway.app/api/v1/"
        echo ""
        echo "üìä Features Available:"
        echo "   ‚úÖ MCP (Model Context Protocol) Integration"
        echo "   ‚úÖ AI-Powered Test Data Generation"
        echo "   ‚úÖ Enhanced QA Automation Tools"
        echo "   ‚úÖ Real-time API Testing Dashboard"
        echo ""
        echo "üîß Monitoring:"
        echo "   Railway Dashboard: https://railway.app/dashboard"
        echo "   Logs: Available in Railway dashboard"
        echo "   Metrics: /actuator/metrics endpoint"
        echo ""
        echo "Version: ${{ github.sha }}"
        echo "Deployed at: $(date)"
        
    - name: Final Health Check
      run: |
        echo "üîç Final production health check..."
        
        HEALTH_URL="https://passionate-communication-production-da98.up.railway.app/actuator/health"
        
        if curl -f -s "$HEALTH_URL" | grep -q "UP"; then
          echo "‚úÖ Production deployment successful!"
          echo "‚úÖ All systems operational"
        else
          echo "‚ùå Production health check failed"
          exit 1
        fi