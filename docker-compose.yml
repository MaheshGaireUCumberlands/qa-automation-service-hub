version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: qa-automation-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - HF_API_KEY=demo-mode
      - SERVER_PORT=8080
      - LOGGING_LEVEL_ROOT=INFO
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
    volumes:
      - backend_logs:/app/logs
    networks:
      - qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.qa-automation.service=backend"
      - "com.qa-automation.version=1.0.0"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: qa-automation-frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.qa-automation.service=frontend"
      - "com.qa-automation.version=1.0.0"

  # Optional: Add monitoring with Prometheus and Grafana
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: qa-automation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - qa-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:10.1.0
    container_name: qa-automation-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=qa-automation-2025
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - qa-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  qa-network:
    driver: bridge
    labels:
      - "com.qa-automation.network=main"

volumes:
  backend_logs:
    driver: local
    labels:
      - "com.qa-automation.volume=backend-logs"
  prometheus_data:
    driver: local
    labels:
      - "com.qa-automation.volume=prometheus-data"
  grafana_data:
    driver: local
    labels:
      - "com.qa-automation.volume=grafana-data"